
------------------------------------------| COMPARISON

Unity C# reference source

<>

Decompiled with JetBrains decompiler

------------------------------------------| X

// X component of the vector.
public float x;

<>

/// <summary>
///   <para>X component of the vector.</para>
/// </summary>
public float x;

------------------------------------------| Y

// Y component of the vector.
public float y;

<>

/// <summary>
///   <para>Y component of the vector.</para>
/// </summary>
public float y;

------------------------------------------| SETTER, GETTER

// Access the /x/ or /y/ component using [0] or [1] respectively.
public float this[int index]
{
    get
    {
        switch (index)
        {
            case 0: return x;
            case 1: return y;
            default:
                throw new IndexOutOfRangeException("Invalid Vector2 index!");
        }
    }

    set
    {
        switch (index)
        {
            case 0: x = value; break;
            case 1: y = value; break;
            default:
                throw new IndexOutOfRangeException("Invalid Vector2 index!");
        }
    }
}

<>

public float this[int index]
{
  get
  {
    if (index == 0)
      return this.x;
    if (index == 1)
      return this.y;
    throw new IndexOutOfRangeException("Invalid Vector2 index!");
  }
  set
  {
    if (index != 0)
    {
      if (index != 1)
        throw new IndexOutOfRangeException("Invalid Vector2 index!");
      this.y = value;
    }
    else
      this.x = value;
  }
}

------------------------------------------| CONSTRUCTOR

// Constructs a new vector with given x, y components.
public Vector2(float x, float y) { this.x = x; this.y = y; }

<>

/// <summary>
///   <para>Constructs a new vector with given x, y components.</para>
/// </summary>
/// <param name="x"></param>
/// <param name="y"></param>
public Vector2(float x, float y)
{
  this.x = x;
  this.y = y;
}

------------------------------------------| SET

// Set x and y components of an existing Vector2.
public void Set(float newX, float newY) { x = newX; y = newY; }

<>

/// <summary>
///   <para>Set x and y components of an existing Vector2.</para>
/// </summary>
/// <param name="newX"></param>
/// <param name="newY"></param>
public void Set(float newX, float newY)
{
  this.x = newX;
  this.y = newY;
}

------------------------------------------| LERP

// Linearly interpolates between two vectors.
public static Vector2 Lerp(Vector2 a, Vector2 b, float t)
{
    t = Mathf.Clamp01(t);
    return new Vector2(
        a.x + (b.x - a.x) * t,
        a.y + (b.y - a.y) * t
        );
}

<>

/// <summary>
///   <para>Linearly interpolates between vectors a and b by t.</para>
/// </summary>
/// <param name="a"></param>
/// <param name="b"></param>
/// <param name="t"></param>
public static Vector2 Lerp(Vector2 a, Vector2 b, float t)
{
  t = Mathf.Clamp01(t);
  return new Vector2(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t);
}

------------------------------------------| LERPUNCLAMPED

// Linearly interpolates between two vectors without clamping the interpolant
public static Vector2 LerpUnclamped(Vector2 a, Vector2 b, float t)
{
    return new Vector2(
        a.x + (b.x - a.x) * t,
        a.y + (b.y - a.y) * t
        );
}

<>

/// <summary>
///   <para>Linearly interpolates between vectors a and b by t.</para>
/// </summary>
/// <param name="a"></param>
/// <param name="b"></param>
/// <param name="t"></param>
public static Vector2 LerpUnclamped(Vector2 a, Vector2 b, float t)
{
  return new Vector2(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t);
}

------------------------------------------| MOVETOWARDS

// Moves a point /current/ towards /target/.
public static Vector2 MoveTowards(Vector2 current, Vector2 target, float maxDistanceDelta)
{
    Vector2 toVector = target - current;
    float dist = toVector.magnitude;
    if (dist <= maxDistanceDelta || dist == 0)
        return target;
    return current + toVector / dist * maxDistanceDelta;
}

<>

/// <summary>
///   <para>Moves a point current towards target.</para>
/// </summary>
/// <param name="current"></param>
/// <param name="target"></param>
/// <param name="maxDistanceDelta"></param>
public static Vector2 MoveTowards(Vector2 current, Vector2 target, float maxDistanceDelta)
{
  Vector2 vector2 = target - current;
  float magnitude = vector2.magnitude;
  if ((double) magnitude <= (double) maxDistanceDelta || (double) magnitude == 0.0)
    return target;
  return current + vector2 / magnitude * maxDistanceDelta;
}

------------------------------------------| SCALE

// Multiplies two vectors component-wise.
public static Vector2 Scale(Vector2 a, Vector2 b) { return new Vector2(a.x * b.x, a.y * b.y); }

<>

/// <summary>
///   <para>Multiplies two vectors component-wise.</para>
/// </summary>
/// <param name="a"></param>
/// <param name="b"></param>
public static Vector2 Scale(Vector2 a, Vector2 b)
{
  return new Vector2(a.x * b.x, a.y * b.y);
}

------------------------------------------| SCALE

// Multiplies every component of this vector by the same component of /scale/.
public void Scale(Vector2 scale) { x *= scale.x; y *= scale.y; }

<>

/// <summary>
///   <para>Multiplies every component of this vector by the same component of scale.</para>
/// </summary>
/// <param name="scale"></param>
public void Scale(Vector2 scale)
{
  this.x *= scale.x;
  this.y *= scale.y;
}


------------------------------------------| NORMALIZE

// Makes this vector have a ::ref::magnitude of 1.
public void Normalize()
{
    float mag = magnitude;
    if (mag > kEpsilon)
        this = this / mag;
    else
        this = zero;
}

<>

/// <summary>
///   <para>Makes this vector have a magnitude of 1.</para>
/// </summary>
public void Normalize()
{
  float magnitude = this.magnitude;
  if ((double) magnitude > 9.99999974737875E-06)
    this = this / magnitude;
  else
    this = Vector2.zero;
}

------------------------------------------| NORMALIZED

// Returns this vector with a ::ref::magnitude of 1 (RO).
public Vector2 normalized
{
    get
    {
        Vector2 v = new Vector2(x, y);
        v.Normalize();
        return v;
    }
}

<>

/// <summary>
///   <para>Returns this vector with a magnitude of 1 (Read Only).</para>
/// </summary>
public Vector2 normalized
{
  get
  {
    Vector2 vector2 = new Vector2(this.x, this.y);
    vector2.Normalize();
    return vector2;
  }
}

------------------------------------------| TOSTRING

/// *listonly*
public override string ToString() { return UnityString.Format("({0:F1}, {1:F1})", x, y); }

<>

/// <summary>
///   <para>Returns a nicely formatted string for this vector.</para>
/// </summary>
/// <param name="format"></param>
public override string ToString()
{
  return UnityString.Format("({0:F1}, {1:F1})", (object) this.x, (object) this.y);
}

------------------------------------------| TOSTRING

// Returns a nicely formatted string for this vector.
public string ToString(string format)
{
    return UnityString.Format("({0}, {1})", x.ToString(format), y.ToString(format));
}

<>

/// <summary>
///   <para>Returns a nicely formatted string for this vector.</para>
/// </summary>
/// <param name="format"></param>
public string ToString(string format)
{
  return UnityString.Format("({0}, {1})", (object) this.x.ToString(format), (object) this.y.ToString(format));
}

------------------------------------------| GETHASHCODE

// used to allow Vector2s to be used as keys in hash tables
public override int GetHashCode()
{
    return x.GetHashCode() ^ (y.GetHashCode() << 2);
}

<>

public override int GetHashCode()
{
  return this.x.GetHashCode() ^ this.y.GetHashCode() << 2;
}

------------------------------------------| EQUALS

// also required for being able to use Vector2s as keys in hash tables
public override bool Equals(object other)
{
    if (!(other is Vector2)) return false;

    Vector2 rhs = (Vector2)other;
    return x.Equals(rhs.x) && y.Equals(rhs.y);
}

<>

/// <summary>
///   <para>Returns true if the given vector is exactly equal to this vector.</para>
/// </summary>
/// <param name="other"></param>
public override bool Equals(object other)
{
  if (!(other is Vector2))
    return false;
  Vector2 vector2 = (Vector2) other;
  return this.x.Equals(vector2.x) && this.y.Equals(vector2.y);
}

------------------------------------------| REFLECT

public static Vector2 Reflect(Vector2 inDirection, Vector2 inNormal)
{
    return -2F * Dot(inNormal, inDirection) * inNormal + inDirection;
}

<>

/// <summary>
///   <para>Reflects a vector off the vector defined by a normal.</para>
/// </summary>
/// <param name="inDirection"></param>
/// <param name="inNormal"></param>
public static Vector2 Reflect(Vector2 inDirection, Vector2 inNormal)
{
  return -2f * Vector2.Dot(inNormal, inDirection) * inNormal + inDirection;
}

------------------------------------------| PERPENDICULAR

public static Vector2 Perpendicular(Vector2 inDirection)
{
    return new Vector2(-inDirection.y, inDirection.x);
}

<>

?

------------------------------------------| DOT

// Dot Product of two vectors.
public static float Dot(Vector2 lhs, Vector2 rhs) { return lhs.x * rhs.x + lhs.y * rhs.y; }

<>

/// <summary>
///   <para>Dot Product of two vectors.</para>
/// </summary>
/// <param name="lhs"></param>
/// <param name="rhs"></param>
public static float Dot(Vector2 lhs, Vector2 rhs)
{
  return (float) ((double) lhs.x * (double) rhs.x + (double) lhs.y * (double) rhs.y);
}

------------------------------------------| MAGNITUDE

// Returns the length of this vector (RO).
public float magnitude { get { return Mathf.Sqrt(x * x + y * y); } }

<>

/// <summary>
///   <para>Returns the length of this vector (Read Only).</para>
/// </summary>
public float magnitude
{
  get
  {
    return Mathf.Sqrt((float) ((double) this.x * (double) this.x + (double) this.y * (double) this.y));
  }
}

------------------------------------------| SQRMAGNITUDE

// Returns the squared length of this vector (RO).
public float sqrMagnitude { get { return x * x + y * y; } }

<>

/// <summary>
///   <para>Returns the squared length of this vector (Read Only).</para>
/// </summary>
public float sqrMagnitude
{
  get
  {
    return (float) ((double) this.x * (double) this.x + (double) this.y * (double) this.y);
  }
}

------------------------------------------| ANGLE

// Returns the angle in degrees between /from/ and /to/.
public static float Angle(Vector2 from, Vector2 to) { return Mathf.Acos(Mathf.Clamp(Dot(from.normalized, to.normalized), -1F, 1F)) * Mathf.Rad2Deg; }

<>

/// <summary>
///   <para>Returns the unsigned angle in degrees between from and to.</para>
/// </summary>
/// <param name="from">The vector from which the angular difference is measured.</param>
/// <param name="to">The vector to which the angular difference is measured.</param>
public static float Angle(Vector2 from, Vector2 to)
{
  return Mathf.Acos(Mathf.Clamp(Vector2.Dot(from.normalized, to.normalized), -1f, 1f)) * 57.29578f;
}

------------------------------------------| SIGNEDANGLE

// Returns the signed angle in degrees between /from/ and /to/. Always returns the smallest possible angle
public static float SignedAngle(Vector2 from, Vector2 to)
{
    Vector2 from_norm = from.normalized, to_norm = to.normalized;
    float unsigned_angle = Mathf.Acos(Mathf.Clamp(Vector2.Dot(from_norm, to_norm), -1F, 1F)) * Mathf.Rad2Deg;
    float sign = Mathf.Sign(from_norm.x * to_norm.y - from_norm.y * to_norm.x);
    return unsigned_angle * sign;
}

<>

/// <summary>
///   <para>Returns the signed angle in degrees between from and to.</para>
/// </summary>
/// <param name="from">The vector from which the angular difference is measured.</param>
/// <param name="to">The vector to which the angular difference is measured.</param>
public static float SignedAngle(Vector2 from, Vector2 to)
{
  Vector2 normalized1 = from.normalized;
  Vector2 normalized2 = to.normalized;
  return Mathf.Acos(Mathf.Clamp(Vector2.Dot(normalized1, normalized2), -1f, 1f)) * 57.29578f * Mathf.Sign((float) ((double) normalized1.x * (double) normalized2.y - (double) normalized1.y * (double) normalized2.x));
}

------------------------------------------| DISTANCE

// Returns the distance between /a/ and /b/.
public static float Distance(Vector2 a, Vector2 b) { return (a - b).magnitude; }

<>

/// <summary>
///   <para>Returns the distance between a and b.</para>
/// </summary>
/// <param name="a"></param>
/// <param name="b"></param>
public static float Distance(Vector2 a, Vector2 b)
{
  return (a - b).magnitude;
}

------------------------------------------| CLAMPMAGNITUDE

// Returns a copy of /vector/ with its magnitude clamped to /maxLength/.
public static Vector2 ClampMagnitude(Vector2 vector, float maxLength)
{
    if (vector.sqrMagnitude > maxLength * maxLength)
        return vector.normalized * maxLength;
    return vector;
}

<>

/// <summary>
///   <para>Returns a copy of vector with its magnitude clamped to maxLength.</para>
/// </summary>
/// <param name="vector"></param>
/// <param name="maxLength"></param>
public static Vector2 ClampMagnitude(Vector2 vector, float maxLength)
{
  if ((double) vector.sqrMagnitude > (double) maxLength * (double) maxLength)
    return vector.normalized * maxLength;
  return vector;
}

------------------------------------------| SQRMAGNITUDE

// [Obsolete("Use Vector2.sqrMagnitude")]
public static float SqrMagnitude(Vector2 a) { return a.x * a.x + a.y * a.y; }

<>

public static float SqrMagnitude(Vector2 a)
{
  return (float) ((double) a.x * (double) a.x + (double) a.y * (double) a.y);
}

------------------------------------------| SQRMAGNITUDE

// [Obsolete("Use Vector2.sqrMagnitude")]
public float SqrMagnitude() { return x * x + y * y; }

<>

public float SqrMagnitude()
{
  return (float) ((double) this.x * (double) this.x + (double) this.y * (double) this.y);
}

------------------------------------------| MIN

// Returns a vector that is made from the smallest components of two vectors.
public static Vector2 Min(Vector2 lhs, Vector2 rhs) { return new Vector2(Mathf.Min(lhs.x, rhs.x), Mathf.Min(lhs.y, rhs.y)); }

<>

/// <summary>
///   <para>Returns a vector that is made from the smallest components of two vectors.</para>
/// </summary>
/// <param name="lhs"></param>
/// <param name="rhs"></param>
public static Vector2 Min(Vector2 lhs, Vector2 rhs)
{
  return new Vector2(Mathf.Min(lhs.x, rhs.x), Mathf.Min(lhs.y, rhs.y));
}

------------------------------------------| MAX

// Returns a vector that is made from the largest components of two vectors.
public static Vector2 Max(Vector2 lhs, Vector2 rhs) { return new Vector2(Mathf.Max(lhs.x, rhs.x), Mathf.Max(lhs.y, rhs.y)); }

<>

/// <summary>
///   <para>Returns a vector that is made from the largest components of two vectors.</para>
/// </summary>
/// <param name="lhs"></param>
/// <param name="rhs"></param>
public static Vector2 Max(Vector2 lhs, Vector2 rhs)
{
  return new Vector2(Mathf.Max(lhs.x, rhs.x), Mathf.Max(lhs.y, rhs.y));
}

------------------------------------------| SMOOTHDAMP

[uei.ExcludeFromDocs]
public static Vector2 SmoothDamp(Vector2 current, Vector2 target, ref Vector2 currentVelocity, float smoothTime, float maxSpeed)
{
    float deltaTime = Time.deltaTime;
    return SmoothDamp(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime);
}

[uei.ExcludeFromDocs]
public static Vector2 SmoothDamp(Vector2 current, Vector2 target, ref Vector2 currentVelocity, float smoothTime)
{
    float deltaTime = Time.deltaTime;
    float maxSpeed = Mathf.Infinity;
    return SmoothDamp(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime);
}

public static Vector2 SmoothDamp(Vector2 current, Vector2 target, ref Vector2 currentVelocity, float smoothTime, [uei.DefaultValue("Mathf.Infinity")] float maxSpeed, [uei.DefaultValue("Time.deltaTime")] float deltaTime)
{
    // Based on Game Programming Gems 4 Chapter 1.10
    smoothTime = Mathf.Max(0.0001F, smoothTime);
    float omega = 2F / smoothTime;

    float x = omega * deltaTime;
    float exp = 1F / (1F + x + 0.48F * x * x + 0.235F * x * x * x);
    Vector2 change = current - target;
    Vector2 originalTo = target;

    // Clamp maximum speed
    float maxChange = maxSpeed * smoothTime;
    change = ClampMagnitude(change, maxChange);
    target = current - change;

    Vector2 temp = (currentVelocity + omega * change) * deltaTime;
    currentVelocity = (currentVelocity - omega * temp) * exp;
    Vector2 output = target + (change + temp) * exp;

    // Prevent overshooting
    if (Dot(originalTo - current, output - originalTo) > 0)
    {
        output = originalTo;
        currentVelocity = (output - originalTo) / deltaTime;
    }

    return output;
}

<>

public static Vector2 SmoothDamp(Vector2 current, Vector2 target, ref Vector2 currentVelocity, float smoothTime, float maxSpeed, float deltaTime)
{
  smoothTime = Mathf.Max(0.0001f, smoothTime);
  float num1 = 2f / smoothTime;
  float num2 = num1 * deltaTime;
  float num3 = (float) (1.0 / (1.0 + (double) num2 + 0.479999989271164 * (double) num2 * (double) num2 + 0.234999999403954 * (double) num2 * (double) num2 * (double) num2));
  Vector2 vector = current - target;
  Vector2 vector2_1 = target;
  float maxLength = maxSpeed * smoothTime;
  Vector2 vector2_2 = Vector2.ClampMagnitude(vector, maxLength);
  target = current - vector2_2;
  Vector2 vector2_3 = (currentVelocity + num1 * vector2_2) * deltaTime;
  currentVelocity = (currentVelocity - num1 * vector2_3) * num3;
  Vector2 vector2_4 = target + (vector2_2 + vector2_3) * num3;
  if ((double) Vector2.Dot(vector2_1 - current, vector2_4 - vector2_1) > 0.0)
  {
    vector2_4 = vector2_1;
    currentVelocity = (vector2_4 - vector2_1) / deltaTime;
  }
  return vector2_4;
}

------------------------------------------| +

// Adds two vectors.
public static Vector2 operator+(Vector2 a, Vector2 b) { return new Vector2(a.x + b.x, a.y + b.y); }

<>

public static Vector2 operator +(Vector2 a, Vector2 b)
{
  return new Vector2(a.x + b.x, a.y + b.y);
}

------------------------------------------| -

// Subtracts one vector from another.
public static Vector2 operator-(Vector2 a, Vector2 b) { return new Vector2(a.x - b.x, a.y - b.y); }

<>

public static Vector2 operator -(Vector2 a, Vector2 b)
{
  return new Vector2(a.x - b.x, a.y - b.y);
}

------------------------------------------| *

// Multiplies one vector by another.
public static Vector2 operator*(Vector2 a, Vector2 b) { return new Vector2(a.x * b.x, a.y * b.y); }

<>

public static Vector2 operator *(Vector2 a, float d)
{
  return new Vector2(a.x * d, a.y * d);
}

------------------------------------------| /

// Divides one vector over another.
public static Vector2 operator/(Vector2 a, Vector2 b) { return new Vector2(a.x / b.x, a.y / b.y); }

<>

public static Vector2 operator /(Vector2 a, float d)
{
  return new Vector2(a.x / d, a.y / d);
}

------------------------------------------| -

// Negates a vector.
public static Vector2 operator-(Vector2 a) { return new Vector2(-a.x, -a.y); }

<>

public static Vector2 operator -(Vector2 a)
{
  return new Vector2(-a.x, -a.y);
}

------------------------------------------| *

// Multiplies a vector by a number.
public static Vector2 operator*(Vector2 a, float d) { return new Vector2(a.x * d, a.y * d); }

<>

public static Vector2 operator *(Vector2 a, float d)
{
  return new Vector2(a.x * d, a.y * d);
}

------------------------------------------| * 

// Multiplies a vector by a number.
public static Vector2 operator*(float d, Vector2 a) { return new Vector2(a.x * d, a.y * d); }

<>

public static Vector2 operator *(float d, Vector2 a)
{
  return new Vector2(a.x * d, a.y * d);
}

------------------------------------------| /

// Divides a vector by a number.
public static Vector2 operator/(Vector2 a, float d) { return new Vector2(a.x / d, a.y / d); }

<>

public static Vector2 operator /(Vector2 a, float d)
{
  return new Vector2(a.x / d, a.y / d);
}

------------------------------------------| ==

// Returns true if the vectors are equal.
public static bool operator==(Vector2 lhs, Vector2 rhs)
{
    // Returns false in the presence of NaN values.
    return (lhs - rhs).sqrMagnitude < kEpsilon * kEpsilon;
}

<>

public static bool operator ==(Vector2 lhs, Vector2 rhs)
{
  return (double) (lhs - rhs).sqrMagnitude < 9.99999943962493E-11;
}

------------------------------------------| !=

// Returns true if vectors are different.
public static bool operator!=(Vector2 lhs, Vector2 rhs)
{
    // Returns true in the presence of NaN values.
    return !(lhs == rhs);
}

<>

public static bool operator !=(Vector2 lhs, Vector2 rhs)
{
  return !(lhs == rhs);
}

------------------------------------------| 3 -> 2

// Converts a [[Vector3]] to a Vector2.
public static implicit operator Vector2(Vector3 v)
{
    return new Vector2(v.x, v.y);
}

<>

public static implicit operator Vector2(Vector3 v)
{
  return new Vector2(v.x, v.y);
}

------------------------------------------| 2 -> 3

// Converts a Vector2 to a [[Vector3]].
public static implicit operator Vector3(Vector2 v)
{
    return new Vector3(v.x, v.y, 0);
}

<>

public static implicit operator Vector3(Vector2 v)
{
  return new Vector3(v.x, v.y, 0.0f);
}

------------------------------------------| ZEROVECTOR

static readonly Vector2 zeroVector = new Vector2(0F, 0F);

<>

private static readonly Vector2 zeroVector = new Vector2(0.0f, 0.0f);

------------------------------------------| ONEVECTOR

static readonly Vector2 oneVector = new Vector2(1F, 1F);

<>

private static readonly Vector2 oneVector = new Vector2(1f, 1f);

------------------------------------------| UPVECTOR

static readonly Vector2 upVector = new Vector2(0F, 1F);

<>

private static readonly Vector2 upVector = new Vector2(0.0f, 1f);

------------------------------------------| DOWNVECTOR

static readonly Vector2 downVector = new Vector2(0F, -1F);

<>

private static readonly Vector2 downVector = new Vector2(0.0f, -1f);

------------------------------------------| LEFTVECTOR

static readonly Vector2 leftVector = new Vector2(-1F, 0F);

<>

private static readonly Vector2 leftVector = new Vector2(-1f, 0.0f);

------------------------------------------| RIGHTVECTOR

static readonly Vector2 rightVector = new Vector2(1F, 0F);

<>

private static readonly Vector2 rightVector = new Vector2(1f, 0.0f);

------------------------------------------| POSITIVEINFINITYVECTOR

static readonly Vector2 positiveInfinityVector = new Vector2(float.PositiveInfinity, float.PositiveInfinity);

<>

private static readonly Vector2 positiveInfinityVector = new Vector2(float.PositiveInfinity, float.PositiveInfinity);

------------------------------------------| NEGATIVEINFINITYVECTOR

static readonly Vector2 negativeInfinityVector = new Vector2(float.NegativeInfinity, float.NegativeInfinity);

<>

private static readonly Vector2 negativeInfinityVector = new Vector2(float.NegativeInfinity, float.NegativeInfinity);

------------------------------------------| ZERO

// Shorthand for writing @@Vector2(0, 0)@@
public static Vector2 zero { get { return zeroVector; } }

<>

/// <summary>
///   <para>Shorthand for writing Vector2(0, 0).</para>
/// </summary>
public static Vector2 zero
{
  get
  {
    return Vector2.zeroVector;
  }
}

------------------------------------------| ONE

// Shorthand for writing @@Vector2(1, 1)@@
public static Vector2 one { get { return oneVector; }   }

<>

/// <summary>
///   <para>Shorthand for writing Vector2(1, 1).</para>
/// </summary>
public static Vector2 one
{
  get
  {
    return Vector2.oneVector;
  }
}

------------------------------------------| UP

// Shorthand for writing @@Vector2(0, 1)@@
public static Vector2 up { get { return upVector; } }

<>

/// <summary>
///   <para>Shorthand for writing Vector2(0, 1).</para>
/// </summary>
public static Vector2 up
{
  get
  {
    return Vector2.upVector;
  }
}

------------------------------------------| DOWN

// Shorthand for writing @@Vector2(0, -1)@@
public static Vector2 down { get { return downVector; } }

<>

/// <summary>
///   <para>Shorthand for writing Vector2(0, -1).</para>
/// </summary>
public static Vector2 down
{
  get
  {
    return Vector2.downVector;
  }
}

------------------------------------------| LEFT

// Shorthand for writing @@Vector2(-1, 0)@@
public static Vector2 left { get { return leftVector; } }

<>

/// <summary>
///   <para>Shorthand for writing Vector2(-1, 0).</para>
/// </summary>
public static Vector2 left
{
  get
  {
    return Vector2.leftVector;
  }
}

------------------------------------------| RIGHT

// Shorthand for writing @@Vector2(1, 0)@@
public static Vector2 right { get { return rightVector; } }

<>

/// <summary>
 ///   <para>Shorthand for writing Vector2(1, 0).</para>
 /// </summary>
 public static Vector2 right
 {
   get
   {
     return Vector2.rightVector;
   }
 }
 
------------------------------------------| POSITIVEINFINITY

// Shorthand for writing @@Vector2(float.PositiveInfinity, float.PositiveInfinity)@@
public static Vector2 positiveInfinity { get { return positiveInfinityVector; } }

<>

/// <summary>
///   <para>Shorthand for writing Vector2(float.PositiveInfinity, float.PositiveInfinity).</para>
/// </summary>
public static Vector2 positiveInfinity
{
  get
  {
    return Vector2.positiveInfinityVector;
  }
}

------------------------------------------| NEGATIVEINFINITY

// Shorthand for writing @@Vector2(float.NegativeInfinity, float.NegativeInfinity)@@
public static Vector2 negativeInfinity { get { return negativeInfinityVector; } }

<>

/// <summary>
///   <para>Shorthand for writing Vector2(float.NegativeInfinity, float.NegativeInfinity).</para>
/// </summary>
public static Vector2 negativeInfinity
{
  get
  {
    return Vector2.negativeInfinityVector;
  }
}

------------------------------------------| KEPSILON

// *Undocumented*
public const float kEpsilon = 0.00001F;

<>

public const float kEpsilon = 1E-05f;